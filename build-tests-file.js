// TODO: document the purpose of this file

const fs = require('fs');

const indentModeTests = require('./tests/indent-mode.json');
const parenModeTests = require('./tests/paren-mode.json');

const warningLine = '""!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n';
const squigglyLine = '""~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n';

var output =
  warningLine +
  warningLine +
  '""' + '\n' +
  '"" NOTE: This file is automatically generated from build-tests-file.js' + '\n' +
  '""       Please do not edit it directly' + '\n' +
  '""' + '\n' +
  warningLine +
  warningLine + '\n' +
  'source parinfer.vim' + '\n' +
  'let s:anyErrorsFound = 0' + '\n\n' +
  squigglyLine +
  '"" Indent Mode Tests' + '\n' +
  squigglyLine + '\n';

indentModeTests.forEach(function(t) {
  output += writeTestCase(t, 'indent') + '\n\n';
})

output += squigglyLine +
  '"" Paren Mode Tests' + '\n' +
  squigglyLine + '\n';

parenModeTests.forEach(function(t) {
  output += writeTestCase(t, 'paren') + '\n\n';
})

output += squigglyLine +
  '"" Show success if there were no failures' + '\n' +
  squigglyLine +
  'if ! s:anyErrorsFound' + '\n' +
  "    echom 'All tests passed!'" + '\n' +
  'endif' + '\n\n';

fs.writeFileSync('tests.vim', output, {encoding: 'utf8'});


// TODO: check idempotence
// TODO: check cross-mode preservation

/*
let s:testId =
let s:result = g:ParinferLib.IndentMode()
let s:expectedText =
if s:result.text !=# s:expectedText
  echom 'Test id ' . s:testId . ' failed'
endif
*/
function writeTestCase(test, mode) {
  var vimlFn = 'g:ParinferLib.IndentMode';
  var modeStr = 'Indent Mode';
  if (mode === 'paren') {
    modeStr = 'Paren Mode';
    vimlFn = 'g:ParinferLib.ParenMode';
  }

  var testId = test.in.fileLineNo;
  var inText = test.in.lines.join('\n');
  var expectedText = test.out.lines.join('\n');
  var options = buildOptions(test.in.cursor);

  var c = '';
  c += 'let s:result = ' + vimlFn + '(' + escapeVimlString(inText) + ', ' + options + ')' + '\n';
  c += 'let s:expectedText = ' + escapeVimlString(expectedText) + '' + '\n';
  c += 'if s:result.text !=# s:expectedText' + '\n';
  c += '    let s:anyErrorsFound = 1' + '\n';
  c += '    echom "' + modeStr + ' Test ' + testId + ' failed"' + '\n';
  c += 'endif' + '\n';

  return c;
}

function buildOptions(opts) {
  var optionsStr = '{';
  if (opts) {
    if (opts.hasOwnProperty('cursorX'))    { optionsStr += "'cursorX':" + opts.cursorX + ','; }
    if (opts.hasOwnProperty('cursorLine')) { optionsStr += "'cursorLine':" + opts.cursorLine + ','; }
    if (opts.hasOwnProperty('cursorDx'))   { optionsStr += "'cursorDx':" + opts.cursorDx + ','; }
  }
  optionsStr += '}';

  return optionsStr
}

function escapeVimlString(s) {
  return JSON.stringify(s);
}
